// @ts-nocheckimport { test, expect, suite } from "vitest";import { Color } from "../../../src/core/graphics/Color";suite("Color Test Suite", () => {	test("Create a color with hex code", () => {		const color = Color.hex("#fff");		const rgb = color.asRGB();		expect(rgb.red).toBe(255);		expect(rgb.green).toBe(255);		expect(rgb.blue).toBe(255);		expect(rgb.alpha).toBe(undefined);		const hsl = color.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(0);		expect(hsl.lightness).toBe(100);		expect(hsl.alpha).toBe(undefined);		const hwb = color.asHWB();		expect(hwb.hue).toBe(0);		expect(hwb.whiteness).toBe(100);		expect(hwb.blackness).toBe(0);		expect(hwb.alpha).toBe(undefined);		const hex = color.asHEX();		expect(hex).toBe("#fff");		const css = color.asCss("hex");		expect(css).toBe("#fff");		const rgbCss = color.asCss("rgb");		expect(rgbCss).toBe("rgb(255 255 255)");		const hslCss = color.asCss("hsl");		expect(hslCss).toBe("hsl(0 0 100)");		const hwbCss = color.asCss("hwb");		expect(hwbCss).toBe("hwb(0 100 0)");		expect(() => color.asCss("invalid")).toThrow(SyntaxError);	});	test("Create a color with rgb color space", () => {		const color = Color.rgb(255, 255, 255, 100);		const rgb = color.asRGB();		expect(rgb.red).toBe(255);		expect(rgb.green).toBe(255);		expect(rgb.blue).toBe(255);		expect(rgb.alpha).toBe(100);		const hsl = color.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(0);		expect(hsl.lightness).toBe(100);		expect(hsl.alpha).toBe(100);		const hwb = color.asHWB();		expect(hwb.hue).toBe(0);		expect(hwb.whiteness).toBe(100);		expect(hwb.blackness).toBe(0);		expect(hwb.alpha).toBe(100);		const hex = color.asHEX();		expect(hex).toBe("#ffffffff");		const rgbCss = color.asCss("rgb");		expect(rgbCss).toBe("rgb(255 255 255 / 1.0)");		const hslCss = color.asCss("hsl");		expect(hslCss).toBe("hsl(0 0 100 / 1.0)");		const hwbCss = color.asCss("hwb");		expect(hwbCss).toBe("hwb(0 100 0 / 1.0)");		const hexCss = color.asCss("hex");		expect(hexCss).toBe("#ffffffff");	});	test("Create a color with hsl color space", () => {		const color = Color.hsl(0, 0, 100, 100);		const value = color.asRGB();		expect(value.red).toBe(255);		expect(value.green).toBe(255);		expect(value.blue).toBe(255);		expect(value.alpha).toBe(100);	});	test("Create a color with hwb color space", () => {		const color = Color.hwb(0, 100, 0, 100);		const value = color.asRGB();		expect(value.red).toBe(255);		expect(value.green).toBe(255);		expect(value.blue).toBe(255);		expect(value.alpha).toBe(100);	});	test("Create a color with css property", () => {		let color = Color.css("rgb(255 255 255 / 0.5)");		let value = color.asRGB();		expect(value.red).toBe(255);		expect(value.green).toBe(255);		expect(value.blue).toBe(255);		expect(value.alpha).toBe(50);		color = Color.css("hsl(0 0 100 / 0.5)");		value = color.asRGB();		expect(value.red).toBe(255);		expect(value.green).toBe(255);		expect(value.blue).toBe(255);		expect(value.alpha).toBe(50);		color = Color.css("hwb(0 100 0 / 0.5)");		value = color.asRGB();		expect(value.red).toBe(255);		expect(value.green).toBe(255);		expect(value.blue).toBe(255);		expect(value.alpha).toBe(50);		color = Color.css("#ffffff80");		value = color.asRGB();		expect(value.red).toBe(255);		expect(value.green).toBe(255);		expect(value.blue).toBe(255);		expect(value.alpha).toBe(50);		expect(() => Color.css("invalid")).toThrow(SyntaxError);		expect(() => Color.css("rgb")).toThrow(SyntaxError);		expect(() => Color.css("hsl")).toThrow(SyntaxError);		expect(() => Color.css("hwb")).toThrow(SyntaxError);	});	test("Mix two colors", () => {		let value = Color.hex("#ffffffff");		let other = Color.hex("#00000000");		let result = value.mix(other, 50);		let rgb = result.asRGB();		expect(rgb.red).toBe(127);		expect(rgb.green).toBe(127);		expect(rgb.blue).toBe(127);		expect(rgb.alpha).toBe(50);		value = Color.hex("#ffffff");		other = Color.hex("#000000");		result = value.mix(other);		rgb = result.asRGB();		expect(rgb.red).toBe(127);		expect(rgb.green).toBe(127);		expect(rgb.blue).toBe(127);		expect(rgb.alpha).toBe(undefined);		expect(() => value.mix(other, 101)).toThrow(RangeError);		expect(() => value.mix(other, -1)).toThrow(RangeError);	});	test("Invert a color", () => {		const color = Color.hex("#ffffff");		const value = color.invert();		const rgb = value.asRGB();		expect(rgb.red).toBe(0);		expect(rgb.green).toBe(0);		expect(rgb.blue).toBe(0);	});	test("Complement a color", () => {		const color = Color.hex("#ffffff");		const value = color.complement();		const hsl = value.asHSL();		expect(hsl.hue).toBe(180);		expect(hsl.saturation).toBe(0);		expect(hsl.lightness).toBe(100);	});	test("Saturate a color", () => {		let color = Color.hex("#ffffff");		let value = color.saturate(50);		let hsl = value.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(50);		expect(hsl.lightness).toBe(100);		color = Color.hex("#ff0000");		value = color.saturate(50);		hsl = value.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(100);		expect(hsl.lightness).toBe(50);		expect(() => color.saturate(101)).toThrow(RangeError);		expect(() => color.saturate(-1)).toThrow(RangeError);	});	test("Desaturate a color", () => {		let color = Color.hex("#ff0000");		let value = color.desaturate(50);		let hsl = value.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(50);		expect(hsl.lightness).toBe(50);		color = Color.hex("#ffffff");		value = color.desaturate(100);		hsl = value.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(0);		expect(hsl.lightness).toBe(100);		expect(() => color.desaturate(101)).toThrow(RangeError);		expect(() => color.desaturate(-1)).toThrow(RangeError);	});	test("Get grayscale color", () => {		const color = Color.hex("#ff0000");		const value = color.grayscale();		const hsl = value.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(0);		expect(hsl.lightness).toBe(50);	});	test("Lighten a color", () => {		let color = Color.hex("#ff0000");		let value = color.lighten(50);		let hsl = value.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(100);		expect(hsl.lightness).toBe(100);		color = Color.hex("#ffffff");		value = color.lighten(50);		hsl = value.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(0);		expect(hsl.lightness).toBe(100);		expect(() => color.lighten(101)).toThrow(RangeError);		expect(() => color.lighten(-1)).toThrow(RangeError);	});	test("Darken a color", () => {		let color = Color.hex("#ff0000");		let value = color.darken(50);		let hsl = value.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(100);		expect(hsl.lightness).toBe(0);		color = Color.hex("#000000");		value = color.darken(50);		hsl = value.asHSL();		expect(hsl.hue).toBe(0);		expect(hsl.saturation).toBe(0);		expect(hsl.lightness).toBe(0);		expect(() => color.darken(101)).toThrow(RangeError);		expect(() => color.darken(-1)).toThrow(RangeError);	});	test("Opacity a color", () => {		let color = Color.hex("#ff000080");		let value = color.opacify(50);		let rgb = value.asRGB();		expect(rgb.red).toBe(255);		expect(rgb.green).toBe(0);		expect(rgb.blue).toBe(0);		expect(rgb.alpha).toBe(100);		color = Color.hex("#ff0000");		value = color.opacify(100);		rgb = value.asRGB();		expect(rgb.red).toBe(255);		expect(rgb.green).toBe(0);		expect(rgb.blue).toBe(0);		expect(rgb.alpha).toBe(100);		expect(() => color.opacify(101)).toThrow(RangeError);		expect(() => color.opacify(-1)).toThrow(RangeError);	});	test("Transparent a color", () => {		let color = Color.hex("#ff0000");		let value = color.transparentize(50);		let rgb = value.asRGB();		expect(rgb.red).toBe(255);		expect(rgb.green).toBe(0);		expect(rgb.blue).toBe(0);		expect(rgb.alpha).toBe(50);		color = Color.hex("#ff000080");		value = color.transparentize(100);		rgb = value.asRGB();		expect(rgb.red).toBe(255);		expect(rgb.green).toBe(0);		expect(rgb.blue).toBe(0);		expect(rgb.alpha).toBe(0);		expect(() => color.transparentize(101)).toThrow(RangeError);		expect(() => color.transparentize(-1)).toThrow(RangeError);	});});