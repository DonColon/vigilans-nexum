import { test, expect, suite } from "vitest";import { Component } from "../../../src/core/ecs/Component";import { JsonSchema } from "../../../src/core/ecs/JsonSchema";suite("Component Test Suite", () => {	interface Point extends JsonSchema {		x: number;		y: number;	}	test("Parse a component from json", () => {		const json = '{"x": 10, "y": 20}';		const component = Component.parse<Point>(json);		expect(component.toObject()).toEqual({ x: 10, y: 20 });	});	test("Clone a component", () => {		const component = new Component<Point>({ x: 10, y: 20 });		const clone = component.clone();		expect(clone.toObject()).toEqual({ x: 10, y: 20 });	});	test("Copy a component", () => {		const component = new Component<Point>({ x: 10, y: 20 });		const other = new Component<Point>({ x: 50, y: 50 });		component.copy(other);		expect(component.toObject()).toEqual({ x: 50, y: 50 });	});	test("Update a component", () => {		const component = new Component<Point>({ x: 10, y: 20 });		component.update({ x: 50, y: 50 });		expect(component.toObject()).toEqual({ x: 50, y: 50 });	});	test("Convert a component to string", () => {		const component = new Component<Point>({ x: 10, y: 20 });		expect(component.toString()).toEqual('{\n\t"x": 10,\n\t"y": 20\n}');	});});